import sys

# Function to find the vertex with the minimum key value that is not yet included in the MST
def min_key(key, mst_set, n):
    min_val = sys.maxsize
    min_index = -1

    for v in range(n):
        if key[v] < min_val and not mst_set[v]:
            min_val = key[v]
            min_index = v

    return min_index

# Function to print the constructed MST stored in parent[]
def print_mst(parent, graph, n):
    print("Edge \tWeight")
    for i in range(1, n):
        print(f"{parent[i]} - {i} \t{graph[i][parent[i]]}")

# Function to construct and print MST using Prim's algorithm
def prim_mst(graph, n):
    # Array to store the constructed MST
    parent = [-1] * n

    # Key values used to pick the minimum weight edge in the cut
    key = [sys.maxsize] * n

    # To represent the set of vertices included in the MST
    mst_set = [False] * n

    # Start with the first vertex
    key[0] = 0
    parent[0] = -1  # First node is always the root of the MST

    for _ in range(n):
        # Pick the minimum key vertex from the set of vertices not yet included in MST
        u = min_key(key, mst_set, n)

        # Add the picked vertex to the MST set
        mst_set[u] = True

        # Update key and parent index of the adjacent vertices of the picked vertex
        for v in range(n):
            if graph[u][v] and not mst_set[v] and graph[u][v] < key[v]:
                key[v] = graph[u][v]
                parent[v] = u

    print_mst(parent, graph, n)

# Example usage:
graph = [
    [0, 2, 0, 6, 0],
    [2, 0, 3, 8, 5],
    [0, 3, 0, 0, 7],
    [6, 8, 0, 0, 9],
    [0, 5, 7, 9, 0]
]
n = len(graph)

prim_mst(graph, n)
